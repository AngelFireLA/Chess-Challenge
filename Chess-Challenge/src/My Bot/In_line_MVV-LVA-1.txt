using System;
using ChessChallenge.API;

public class MyBot : IChessBot
{
    private Move emergencyMove;
    private bool isEmergencyMode;

    int[] p = new[] { 0, 1, 3, 3, 5, 9, 1000 }; // Piece values: None, Pawn, Knight, Bishop, Rook, Queen, King

    public Move Think(Board board, Timer timer) {
        
        if(timer.MillisecondsRemaining < 3000) {
            isEmergencyMode = true;
            emergencyMove = board.GetLegalMoves()[new Random().Next(board.GetLegalMoves().Length)];
            return emergencyMove;
        }

        AlphaBeta(board, 4, int.MinValue, int.MaxValue, board.IsWhiteToMove);
        return emergencyMove;
    }

    int AlphaBeta(Board board, int depth, int a, int b, bool white) {
        if (depth == 0)
            return MaterialScore(board, white);


        Move[] moves = board.GetLegalMoves();
Array.Sort(moves, (moveA, moveB) => (moveB.CapturePieceType != PieceType.None ? p[(int)moveB.CapturePieceType] - p[(int)moveB.MovePieceType] : 0)
    .CompareTo(moveA.CapturePieceType != PieceType.None ? p[(int)moveA.CapturePieceType] - p[(int)moveA.MovePieceType] : 0));

        for(int i = 0; i < moves.Length; i++) {
            board.MakeMove(moves[i]);
            var val = -AlphaBeta(board, depth - 1, -b, -a, !white);
            board.UndoMove(moves[i]);

            if(val >= b)
                return b;

            if(val > a) {
                a = val;
                if (depth == 4){
                    emergencyMove = moves[i];}
            }
            }    
        }

        return a;
    }

    int MaterialScore(Board board, bool white) {
        int s = 0;
        var pieceLists = board.GetAllPieceLists();
        for(int i=0; i<pieceLists.Length; i++) {
            var pl = pieceLists[i];
            s += pl.Count * (pl.IsWhitePieceList == white ? 1 : -1) * p[(int)pl.TypeOfPieceInList];
        }  
        return s;
    }
}